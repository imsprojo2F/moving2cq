/**   
 * @Title: RfidInfoController.java 
 * @Package com.movingcq.controller 
 * @Description: TODO(用一句话描述该文件做什么) 
 * @author IsProjo
 * @date 2016年12月14日 下午5:08:12 
 * @version V1.0   
 */
package com.movingcq.controller;

import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.movingcq.entity.BucketInfo;
import com.movingcq.entity.RfidInfo;
import com.movingcq.service.IBucketInfoService;
import com.movingcq.service.IRfidInfoService;
import com.movingcq.util.ApiResult;
import com.movingcq.util.GetUID;

/**
 * @ClassName: RfidInfoController
 * @Description: TODO(这里用一句话描述这个类的作用)
 * @author IsProjo
 * @date 2016年12月14日 下午5:08:12
 * 
 */

@Controller
@RequestMapping("/menu/rfid")
public class RfidInfoController {

	public static int PAGE_NOW;
	public static int PAGE_SIZE;

	private int isSucc = 0;
	boolean isTrue = false;
	String key = "";
	String sortKey = "";
	String sortType = "";
	String spageNow = "";
	String spageSize = "";
	Object rObject = null;

	Map<String, Object> qMap = new HashMap<String, Object>();
	Map<String, Object> resultMap = new LinkedHashMap<String, Object>();

	@Autowired
	private IRfidInfoService rfidService;
	@Autowired
	private IBucketInfoService bucketService;

	// 验证是否已被使用
	@ResponseBody
	@RequestMapping("validate")
	public Object validate(String validateValue) {

		RfidInfo rfidInfo = null;
		rfidInfo = rfidService.selectByRfid(validateValue);
		if (rfidInfo == null) {
			rObject = new ApiResult("可用", ApiResult.CODE_SUCCESS);
		} else {
			rObject = new ApiResult("不可用", ApiResult.CODE_FAIL);
		}
		return rObject;
	}

	@ResponseBody
	@RequestMapping("addRfid")
	public Object addRfid(RfidInfo rfidInfo) {
		Long now = new Date().getTime();
		rfidInfo.setCreatetime(now);
		rfidInfo.setLastchangetime(now);
		rfidInfo.setId(GetUID.getUUID());
		rfidInfo.setStatus(0);
		rfidInfo.setBeendeleted(0);
		rfidInfo.setBeenmark(0);
		rfidInfo.setRestaurantId(" ");
		rfidInfo.setCardbindingdate("暂未绑定");
		isSucc = rfidService.insert(rfidInfo);
		if (isSucc == 1) {
			rObject = new ApiResult("保存成功", ApiResult.CODE_SUCCESS);
		} else {
			rObject = new ApiResult("保存失败", ApiResult.CODE_FAIL);
		}

		return rObject;
	}

	@ResponseBody
	@RequestMapping("deleteRfid")
	public Object deleteUser(HttpServletRequest request) {

		String idArr = request.getParameter("ids");
		/*
		 * String rfid = request.getParameter("rfids"); String[] ids =
		 * idArr.split(","); String[] rfids = rfid.split(",");
		 * 
		 * isSucc = rfidService.deleteById(ids);
		 * 
		 * // 检查用户是否删除了bucket，防止空指针 List<Bucket2RfidInfo> bList =
		 * bucketService.listAllBucketInfo(null); if (bList.size() > 0) {
		 * bucketService.deleteByRfids(rfids); }
		 */

		RfidInfo rfidInfo = new RfidInfo();
		rfidInfo.setId(idArr);
		rfidInfo.setBeendeleted(1);
		rfidInfo.setDeletedtime(new Date().getTime());
		isSucc = rfidService.updateById(rfidInfo);
		if (isSucc > 0) {
			rObject = new ApiResult("删除成功", ApiResult.CODE_SUCCESS);
		} else {
			rObject = new ApiResult("删除失败", ApiResult.CODE_FAIL);
		}
		return rObject;
	}

	@ResponseBody
	@RequestMapping("updateRfid")
	public Object updateRfid(RfidInfo rfidInfo, HttpServletRequest request) {

		// String oldRfid = request.getParameter("oldRfid");

		rfidInfo.setLastchangetime(new Date().getTime());
		int isSucc = rfidService.updateById(rfidInfo);
		// bucketService.updateByRfid(rfidInfo.getRfid(), oldRfid);
		if (isSucc > 0) {
			rObject = new ApiResult("保存成功", ApiResult.CODE_SUCCESS);
		} else {
			rObject = new ApiResult("保存失败", ApiResult.CODE_FAIL);
		}

		return rObject;
	}

	@ResponseBody
	@RequestMapping("listAllRfid")
	public Map<String, Object> listAllRfid(HttpServletRequest request) {

		List<RfidInfo> allList1 = rfidService.listAllRfidInfo(qMap);
		int recordsTotal = allList1.size();

		int pageSize = 10;
		int pageNow = 1;
		String size = request.getParameter("length");
		if (!"".equals(size) && size != null) {
			pageSize = Integer.parseInt(size);
		}
		String currentRecord = request.getParameter("start");
		if (!"".equals(currentRecord) && currentRecord != null) {
			pageNow = Integer.parseInt(currentRecord);
			// pageNow = (pageNow-1)*pageSize;
		}
		// For sortable
		String columnArray[] = { "", "id", "rfidCode", "rfidStatus", "restaurantId", "cardBindingDate", "createTime",
				"lastChangeTime" };
		String sort = request.getParameter("order[0][column]");
		if (!"".equals(sort) && sort != null) {
			int index = Integer.parseInt(sort);
			sort = columnArray[index];
		}
		String dir = request.getParameter("order[0][dir]");

		// For search
		String key = request.getParameter("search[value]");

		qMap.put("key", key);
		qMap.put("sort", sort);
		qMap.put("dir", dir);
		qMap.put("pageNow", pageNow);
		qMap.put("pageSize", pageSize);

		// 获取rfid总记录数

		List<RfidInfo> allList2 = rfidService.listAllRfidInfo(qMap);
		int recordsFiltered = allList2.size();

		List<Map<String, String>> rfidList = rfidService.selectByPage(qMap);
		if (rfidList != null) {

			resultMap.put("draw", request.getParameter("draw"));
			resultMap.put("recordsTotal", recordsTotal);
			resultMap.put("recordsFiltered", recordsFiltered);
			resultMap.put("data", rfidList);
			return resultMap;
		}
		return null;

	}

	// 查询所有未被使用的rfid标签用于bucketInfo rfid下拉框
	@ResponseBody
	@RequestMapping("listUnUseRfid")
	public Object listRfid(Integer pageNow, Integer pageSize) {

		List<BucketInfo> bucketList = bucketService.listAllBucketInfo(qMap);
		String[] rfids = new String[bucketList.size()];
		for (int i = 0; i < bucketList.size(); i++) {
			rfids[i] = bucketList.get(i).rfid;
		}

		List<RfidInfo> allList = rfidService.listUnUseRfid(rfids);
		resultMap.put("rfidList", allList);
		return allList;

	}

	/**
	 * 垃圾桶RFID
	 * 
	 * @return
	 */
	@RequestMapping("/info")
	public String info() {
		return "rfid/info";
	}

	/**
	 * 垃圾桶RFID更替记录
	 * 
	 * @return
	 */
	@RequestMapping("/replaceRecord")
	public String replaceRecord() {
		return "rfid/replaceRecord";
	}

}
